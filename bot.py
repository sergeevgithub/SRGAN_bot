from config import TOKEN
from generator import generate
import logging
from aiogram import Bot, Dispatcher, executor, types


API_TOKEN = TOKEN
# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.reply(text="–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ srganbot!\n"
                        "–Ø –ø–æ–º–æ–≥—É —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Ç–≤–æ–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏,\n–ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ!\n\n"
                        "/info - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")


@dp.message_handler(commands=['info'])
async def send_info(message: types.Message):
    await message.reply(text="–≠—Ç–æ—Ç –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏—Ç–æ–≥–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ Deep Learning School.\n\n"
                        "–†–∞–±–æ—Ç—É –≤—ã–ø–æ–ª–Ω–∏–ª –ú–∏—Ö–∞–∏–ª –°–µ—Ä–≥–µ–µ–≤,\n"
                        "stepik_id: 31945458.\n\n"
                        "–§–µ–≤—Ä–∞–ª—å, 2021.")


@dp.message_handler(content_types=['photo'])
async def handle_photo(message):
    await message.photo[-1].download('data/input.jpg')
    generate('data/input.jpg').save('data/output.jpg')
    with open('data/output.jpg', 'rb') as photo:
        await message.reply_photo(photo, caption='–ì–æ—Ç–æ–≤–æ!')


@dp.message_handler(regexp='(^cat[s]?$|puss)')
async def cats(message: types.Message):
    with open('data/cats.jpg', 'rb') as photo:
        await message.reply_photo(photo, caption='Cats are here üò∫')


@dp.message_handler(regexp='(^dog[s]?$|puppy)')
async def dog(message: types.Message):
    with open('data/dog.jpg', 'rb') as photo:
        await message.reply_photo(photo, caption='Dog is here! Woof!')


@dp.message_handler()
async def exception(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
